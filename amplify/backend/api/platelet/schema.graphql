type User @model {
  id: ID!
  username: String!
  contact: AddressAndContactDetails @connection
  displayName: String!
  name: String
  roles: [Role!]!
  dateOfBirth: AWSDateTime
  vehicles: [Vehicle] @connection(keyName: "byAssignedUser", fields: ["id"])
  patch: [Patch]
  profilePictureURL: String
  profilePictureThumbnailURL: String
  comments: [Comment]
  group: Group @connection(name: "GroupMembers")
  tasks: [UserTasks] @connection(name: "UserTasks")
  tasksCoordinator: [CoordinatorTasks] @connection(name: "CoordinatorTasks")
  active: Int!
  telephoneNumber: String
  mobileNumber: String
  emailAddress: String
  line1: String
  line2: String
  line3: String
  town: String
  county: String
  state: String
  country: String
  postcode: String
  what3words: String
}

type Group @model {
  id: ID!
  taskGroupId: ID
  name: String
  users: [User] @connection(name: "GroupMembers")
}

type Vehicle @model @key(name: "byAssignedUser", fields: ["assignedUserID"]) {
  id: ID!
  assignedUserID: ID
  name: String!
  manufacturer: String
  model: String
  dateOfManufacture: AWSDateTime
  dateOfRegistration: AWSDateTime
  assignedUser: User @connection(fields: ["assignedUserID"])
  comments: [Comment]
}

type Location @model {
  id: ID!
  name: String
  listed: Int
  contact: String
  telephoneNumber: String
  mobileNumber: String
  emailAddress: String
  ward: String
  line1: String
  line2: String
  line3: String
  town: String
  county: String
  state: String
  country: String
  postcode: String
  what3words: String
  comments: [Comment]
}

type AddressAndContactDetails @model {
  id: ID!
  name: String
  telephoneNumber: String
  mobileNumber: String
  emailAddress: String
  ward: String
  line1: String
  line2: String
  line3: String
  town: String
  county: String
  state: String
  country: String
  postcode: String
  what3words: String
}
type Deliverable @model {
  id: ID!
  type: DeliverableType!
  count: Int!
  unit: DeliverableUnit
  comments: [Comment]
}

type UserTasks @model(queries: null) {
  id: ID!
  user: User @connection(name: "UserTasks")
  task: Task @connection(name: "TaskUsers")
}
type CoordinatorTasks @model(queries: null) {
  id: ID!
  coordinator: User @connection(name: "CoordinatorTasks")
  task: Task @connection(name: "TaskCoordinators")
}

type Task
  @model
  @key(name: "byStatus", fields: ["status"], queryField: "tasksByStatus") {
  #   @key(
  #     name: "byStatusbyGroup"
  #     fields: ["status", "group"]
  #     queryField: "tasksByStatusbyGroup"
  #   )
  id: ID!
  name: String
  createdBy: User @connection
  timeOfCall: AWSDateTime
  timePickedUp: AWSDateTime
  timeDroppedOff: AWSDateTime
  timeCancelled: AWSDateTime
  timeRejected: AWSDateTime
  requesterContact: AddressAndContactDetails
  pickupLocation: AddressAndContactDetails @connection
  dropoffLocation: AddressAndContactDetails @connection
  patch: Patch
  coordinators: [CoordinatorTasks] @connection(name: "TaskCoordinators")
  riders: [UserTasks] @connection(name: "TaskUsers")
  priority: Priority
  deliverables: [Deliverable!]
  relayPrevious: Task @connection
  relayNext: Task @connection
  group: [Group] @connection
  comments: [Comment!] @connection(keyName: "byParent", fields: ["id"])
  status: TaskStatus!
}

type Comment @model @key(name: "byParent", fields: ["parentID", "body"]) {
  id: ID!
  parentID: ID!
  body: String!
  author: User @connection
  publiclyVisible: Boolean
}

type DeliverableType @model {
  id: ID!
  name: String!
}

#TODO: Need to understand more of the context around statuses available, discuss with group
enum TaskStatus {
  NEW
  ACTIVE
  PICKED_UP
  DROPPED_OFF
  CANCELLED
  REJECTED
}

enum Priority {
  HIGH
  MEDIUM
  LOW
}

enum Patch {
  NORTH
  WEST
  EAST
  SOUTH
  RELIEF
  AIR_AMBULANCE
}

enum DeliverableUnit {
  LITRE
  MILLILITRES
  GRAMS
  COUNT
  BOX
}

enum Role {
  COORDINATOR
  RIDER
  ADMIN
}
