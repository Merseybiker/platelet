type Tenant @auth(rules: [{allow: private}, {allow: private, provider: iam, operations: [create, read, update, delete]}]) @model {
  id: ID!
  name: String!
  referenceIdentifier: String!
}

type User @auth(rules: [{allow: private}, {allow: private, provider: iam, operations: [create, read, update, delete]}]) @model {
  id: ID!
  cognitoId: ID! @index(name: "byCognitoId", queryField: "getUserByCognitoId")
  tenantId: ID! @index(name: "byTenantId")
  contact: AddressAndContactDetails
  displayName: String!
  name: String
  roles: [Role!]!
  dateOfBirth: AWSDateTime
  vehicles: [Vehicle] @hasMany(indexName: "byAssignedUser", fields: ["id"])
  riderResponsibility: RiderResponsibility @hasOne
  profilePictureURL: String
  profilePictureThumbnailURL: String
  profilePicture: S3Object
  profilePictureThumbnail: S3Object
  comments: [Comment] @hasMany
  assignments: [TaskAssignee] @hasMany(indexName: "byAssignee", fields: ["id"])
  active: Int!
}

type S3Object {
  bucket: String!
  key: String!
  region: String!
}

type Vehicle @auth(rules: [{allow: private}]) @model {
  id: ID!
  tenantId: ID! @index(name: "byTenantId")
  assignedUserID: ID @index(name: "byAssignedUser")
  name: String
  manufacturer: String
  model: String
  dateOfManufacture: AWSDateTime
  dateOfRegistration: AWSDateTime
  assignedUser: User @belongsTo(fields: ["assignedUserID"])
  comments: [Comment] @hasMany(indexName: "byParent", fields: ["id"])
}

type AddressAndContactDetails {
  name: String
  telephoneNumber: String
  mobileNumber: String
  emailAddress: String
  ward: String
  line1: String
  line2: String
  line3: String
  town: String
  county: String
  state: String
  country: String
  postcode: String
  what3words: String
}

type Location @auth(rules: [{allow: private}]) @model {
  id: ID!
  tenantId: ID! @index(name: "byTenantId")
  name: String
  listed: Int
  contact: AddressAndContactDetails
  ward: String
  line1: String
  line2: String
  line3: String
  town: String
  county: String
  state: String
  country: String
  postcode: String
  what3words: String
  tasksAsPickUp: [Task] @hasMany(indexName: "byPickUpLocation", fields: ["id"])
  tasksAsDropOff: [Task] @hasMany(indexName: "byDropOffLocation", fields: ["id"])
  comments: [Comment] @hasMany(indexName: "byParent", fields: ["id"])
}

type Task @model @auth(rules: [{allow: private}]) {
  id: ID!
  tenantId: ID! @index(name: "byTenantId")
  createdBy: User @hasOne
  timeOfCall: AWSDateTime
  timePickedUp: AWSDateTime
  timeDroppedOff: AWSDateTime
  timeCancelled: AWSDateTime
  timeRejected: AWSDateTime
  timeRiderHome: AWSDateTime
  requesterContact: AddressAndContactDetails
  pickUpLocationId: ID @index(name: "byPickUpLocation")
  dropOffLocationId: ID @index(name: "byDropOffLocation")
  pickUpLocation: Location @belongsTo(fields: ["pickUpLocationId"])
  dropOffLocation: Location @belongsTo(fields: ["dropOffLocationId"])
  riderResponsibility: RiderResponsibility @hasOne
  assignees: [TaskAssignee] @hasMany(indexName: "byTask", fields: ["id"])
  priority: Priority
  deliverables: [Deliverable] @hasMany
  relayPrevious: Task @hasOne
  relayNext: Task @hasOne
  comments: [Comment] @hasMany(indexName: "byParent", fields: ["id"])
  status: TaskStatus @index(name: "byStatus", queryField: "tasksByStatus")
}

type TaskAssignee @model @auth(rules: [{allow: private}]) {
  id: ID!
  tenantId: ID! @index(name: "byTenantId")
  taskId: ID! @index(name: "byTask", sortKeyFields: ["assigneeId"])
  assigneeId: ID! @index(name: "byAssignee", sortKeyFields: ["taskId"])
  role: Role!
  task: Task! @belongsTo(fields: ["taskId"])
  assignee: User! @belongsTo(fields: ["assigneeId"])
}

type Comment @auth(rules: [{allow: private}]) @model {
  id: ID!
  parentId: ID @index(name: "byParent")
  tenantId: ID! @index(name: "byTenantId")
  body: String
  author: User @belongsTo
  visibility: CommentVisibility
}

type DeliverableType @auth(rules: [{allow: private}]) @model {
  id: ID!
  label: String!
  tenantId: ID! @index(name: "byTenantId")
  icon: DeliverableTypeIcon
  defaultUnit: DeliverableUnit
  deliverables: [Deliverable] @hasMany
  tags: [String]
}

type Deliverable @auth(rules: [{allow: private}]) @model {
  id: ID!
  tenantId: ID! @index(name: "byTenantId")
  deliverableType: DeliverableType @belongsTo
  task: Task @belongsTo
  count: Int
  unit: DeliverableUnit
  orderInGrid: Int
  comments: [Comment] @hasMany(indexName: "byParent", fields: ["id"])
}

enum DeliverableTypeIcon {
  BUG
  CHILD
  DOCUMENT
  EQUIPMENT
  OTHER
}

type RiderResponsibility @auth(rules: [{allow: private}]) @model {
  id: ID!
  tenantId: ID! @index(name: "byTenantId")
  label: String!
}

enum TaskStatus {
  NEW
  ACTIVE
  PICKED_UP
  DROPPED_OFF
  CANCELLED
  REJECTED
  ABANDONED
  COMPLETED
}

enum Priority {
  HIGH
  MEDIUM
  LOW
}

enum Patch {
  NORTH
  WEST
  EAST
  SOUTH
  RELIEF
  AIR_AMBULANCE
}

enum DeliverableUnit {
  NONE
  LITRE
  MILLILITRE
  GRAM
  ITEM
  BOX
}

enum Role {
  USER
  COORDINATOR
  RIDER
  ADMIN
}

enum CommentVisibility {
  EVERYONE
  ME
}

type Mutation {
  registerUser(name: String, email: String, tenantId: ID, roles: [Role]): User @function(name: "plateletAdminAddNewUser-${env}") @auth(rules: [{allow: private}])
  registerTenant(name: String, email: String): User @function(name: "plateletAddNewTenant-${env}") @auth(rules: [{allow: private}])
}

type Statistics {
  numCancelled: Int
  numCompleted: Int
  numDroppedOff: Int
  numRejected: Int
  numAbandoned: Int
  numActive: Int
  numPickedUp: Int
  numNew: Int
  numTest: Int
}

type Query {
  getStatistics(tenantId: ID!): Statistics @function(name: "plateletGetStatistics-${env}")
}
