type User
@model
{
    id: ID!
    username: String!
    contact: Contact
    displayName: String!
    name: String
    roles: [Role!]
    dateOfBirth: AWSDateTime
    assignedVehicles: [Vehicle] @connection(keyName: "byAssignedUser", fields: ["id"])
    patch: Patch
    status: String!
    profilePictureURL: String
    profilePictureThumbnailURL: String
    comments: [Comment]
    loggedActions: [LogEntry]
}

enum Role
{
    COORDINATOR
    RIDER
    ADMIN
}

type Location
@model
{
    id: ID!
    name: String
    contact: Contact
    address: Address
    listed: Boolean
    protected: Boolean
    comments: [Comment]
    loggedActions: [LogEntry]
}

type LogEntry
@model
{
    id: ID!
    ipAddress: String
    callingUser: User
    dataFields: String
}
enum Priority
{
    HIGH
    MEDIUM
    LOW
}

enum Patch
{
    NORTH
    WEST
    EAST
    SOUTH
    RELIEF
    AIR_AMBULANCE
}
type Vehicle
@model
@key(name: "byAssignedUser", fields: ["assignedUserID"])
{
    id: ID!
    assignedUserID: ID
    name: String!
    manufacturer: String
    model: String
    dateOfManufacture: AWSDateTime
    dateOfRegistration: AWSDateTime
    assignedUser: User @connection(fields: ["assignedUserID"])
    comments: [Comment]
    loggedActions: [LogEntry]
}
type Contact
@model
{
    id: ID!
    name: String
    address: [Address]
    telephoneNumber: String
    mobileNumber: String
    emailAddress: String
}

type Address
@model
{
    id: ID!
    ward: String
    line1: String
    line2: String
    line3: String
    town: String
    county: String
    state: String
    country: String
    postcode: String
    zipcode: String
    what3words: String
}

type Deliverable
@model
{
    id: ID!
    type: DeliverableType
    count: Int!
    unit: DeliverableUnit
    numBoxes: Int
    comments: [Comment]

}

enum DeliverableType
{
    MILK
    BLOOD
    PLATELETS
    SAMPLE
    COVID_SAMPLE
    DOCUMENTS
    EQUIPMENT
    OTHER
}

enum DeliverableUnit
{
    LITRE
    MILLILITRES
    GRAMS
    COUNT
    BOX
}

type Task
@model
@key(name: "byStatus", fields: ["status"], queryField: "tasksByStatus")
{
    id: ID!
    reference: String!
    orderInRelay: Int!
    author: User @connection
    timeOfCall: AWSDateTime!
    timePickedUp: AWSDateTime
    timeDroppedOff: AWSDateTime
    timeCancelled: AWSDateTime
    timeRejected: AWSDateTime
    requesterContact: Contact
    pickupLocation: Location
    dropoffLocation: Location
    patch: Patch
    priority: Priority
    deliverables: [Deliverable]
    assignedRidersDisplayString: String! @function(name: "PlateletTaskResolvers-${env}")
    assignedCoordinatorsDisplayString: String! @function(name: "PlateletTaskResolvers-${env}")
    assignees: [Assignment!] @connection(keyName: "byTask", fields: ["id"])
    relayPrevious: Task
    relayNext: Task
    loggedActions: [LogEntry]
    comments: [Comment] @connection(keyName: "byParent", fields: ["id"])
    status: TaskStatus!
    statusHumanReadable: String @function(name: "PlateletTaskResolvers-${env}")
}

type Assignment
@model
@key(name: "byTask", fields: ["taskID"])
@key(name: "byTaskByRole", fields: ["taskID", "role"], queryField: "assigneesByRole")
{
    taskID: ID!
    assignee: User! @connection
    role: Role!
}

enum TaskStatus
{
    NEW,
    ACTIVE,
    PICKED_UP,
    DROPPED_OFF,
    CANCELLED,
    REJECTED
}

type Comment
@model
@key(name: "byParent", fields: ["parentID", "body"])
{
    id: ID!
    parentID: ID!
    body: String!
    author: User @connection
    publiclyVisible: Boolean
    loggedAction: [LogEntry]
    numEdits: Int
}

enum Locale
{
    GB
}

type ServerSettings
@model
{
    id: ID!
    imageURL: String
    favicon: String
    version: String
    hostname: String
}

type Organisation
@model
{
    id: ID!
    organisationName: String!
}
type Group
@model
{
    groupName: String
    locale: Locale
}
